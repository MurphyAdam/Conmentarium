{"version":3,"sources":["components/Note/AddNote.jsx"],"names":["useStyles","makeStyles","theme","root","margin","spacing","width","shape","height","shapeCircle","borderRadius","colors","card","display","flexDirection","AddNote","props","setDisplayAddNoteComponent","dispatch","useDispatch","classes","useState","title","body","color","tags","note","setNote","isLoading","setIsLoading","handleSubmit","event","a","preventDefault","createNoteService","response","addNote","data","notificationError","message","request","statusText","notificationTemplate","renderArray","errors","handleFieldChange","target","name","value","Circle","className","clsx","style","background","onClick","handleColorChange","noValidate","autoComplete","id","label","multiline","rowsMax","onChange","variant","separator","noteColors","map","disabled"],"mappings":"+SAkBMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJ,uBAAwB,CACtBC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,SAGXC,MAAO,CACLD,MAAO,GACPE,OAAQ,IAEVC,YAAa,CACXC,aAAc,OAEhBC,OAAQ,CACPP,OAAQF,EAAMG,QAAQ,GACtB,QAAS,CACND,OAAQF,EAAMG,QAAQ,KAG1BO,KAAM,CACJC,QAAS,OACTC,cAAe,cAoHJC,UAhHf,SAAiBC,GAAQ,IAEfC,EAFc,eAEqBD,GAAnCC,2BACFC,EAAWC,wBACXC,EAAUpB,IAJM,EAKEqB,mBACtB,CACEC,MAAO,KACPC,KAAM,KACNC,MAAO,OACPC,KAAM,OAVY,mBAKfC,EALe,KAKTC,EALS,OAYYN,oBAAS,GAZrB,mBAYfO,EAZe,KAYJC,EAZI,KAchBC,EAAY,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DACnBD,EAAME,iBACNJ,GAAa,GAFM,kBAKMK,YAAkBR,GALxB,OAKXS,EALW,OAQjBlB,GAA2B,GAG3BC,EAASkB,YAAQD,EAASE,KAAKX,OAXd,kDAcfR,EAASoB,gBAAkB,CAAC,MAAS,KAAMH,SAASE,KAAKE,SACvD,KAAMC,QAAQC,WACd,YAAe,EACf,QAAU,qBACV,SAAYC,IAAqBC,YAArB,UAAiC,KAAMR,gBAAvC,iBAAiC,EAAgBE,YAAjD,aAAiC,EAAsBO,WAlBtD,QAqBnBf,GAAa,GArBM,0DAAH,sDA4BZgB,EAAoB,SAAAd,GAAU,IAAD,EACTA,EAAMe,OAAtBC,EADyB,EACzBA,KAAMC,EADmB,EACnBA,MACdrB,GAAQ,SAAAD,GAAI,sBAAUA,EAAV,eAAiBqB,EAAOC,QAGhCC,EAAS,SAACjC,GAAW,IAClBQ,EADiB,eACHR,GAAdQ,MACR,OACC,yBAAK0B,UAAWC,YAAK/B,EAAQb,MAAOa,EAAQX,aAC1CsC,KAAK,QACNK,MAAO,CAACC,WAAY7B,GAAgB,MACpC8B,QAAS,kBAfc,SAAA9B,GACxBG,GAAQ,SAAAD,GAAI,sBAAUA,EAAV,CAAgBF,MAAOA,OAcnB+B,CAAkB/B,OAItC,OACC,kBAAC,IAAD,CAAM0B,UAAW9B,EAAQR,KAAMwC,MAAO,CAACC,WAAY3B,EAAKF,MAAQE,EAAKF,MAAQ,OAC1E,0BAAM0B,UAAW9B,EAAQjB,KAAMqD,YAAU,EAACC,aAAa,OACrD,6BACE,kBAAC,IAAD,CACEC,GAAG,0BACHC,MAAM,QACNZ,KAAK,QACLa,WAAS,EACTC,QAAS,EACTb,MAAOtB,EAAKJ,MACZwC,SAAUjB,EACVkB,QAAQ,WAEV,kBAAC,IAAD,CACEL,GAAG,0BACHC,MAAM,OACNZ,KAAK,OACLa,WAAS,EACTC,QAAS,GACTb,MAAOtB,EAAKH,KACZuC,SAAUjB,EACVkB,QAAQ,WAEV,kBAAC,IAAD,CACEL,GAAG,0BACHC,MAAM,OACNZ,KAAK,OACLa,WAAS,EACTC,QAAS,EACTb,MAAOtB,EAAKD,KACZqC,SAAUjB,EACVkB,QAAQ,WAEV,yBAAKb,UAAW9B,EAAQT,QAAxB,QAEC,kBAAC,IAAD,CAAaqD,UAAU,KACrBC,IAAWC,KAAI,SAAC1C,GAAD,OACd,kBAACyB,EAAD,CAAQzB,MAAOA,WAOzB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAY8B,QAASxB,EAAcqC,SAAUvC,GAC3C,kBAAC,IAAD","file":"static/js/5.88f249db.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport TextField from '@material-ui/core/TextField';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\n\nimport CardActions from '@material-ui/core/CardActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport DoneIcon from '@material-ui/icons/Done';\nimport { createNoteService } from '../../services/note-api';\n\nimport { useDispatch } from 'react-redux';\nimport { error as notificationError } from 'react-notification-system-redux';\nimport { notificationTemplate } from '../../redux/methods';\nimport { setNote as addNote } from '../../redux/actions/notebook';\nimport { noteColors } from '../../constants';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '95% ',\n    },\n  },\n  shape: {\n    width: 30,\n    height: 30,\n  },\n  shapeCircle: {\n    borderRadius: '25%',\n  },\n  colors: {\n  \tmargin: theme.spacing(1),\n  \t'& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  card: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n}));\n\nfunction AddNote(props) {\n\n  const { setDisplayAddNoteComponent } = {...props};\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const [note, setNote] = useState(\n    {\n      title: null, \n      body: null, \n      color: '#fff', \n      tags: null\n    });\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setIsLoading(true);\n    try {\n      // Api Call To Create Note\n      const response = await createNoteService(note);\n      // The Request Was Fulffiled And The Note Was Created\n      // So Let's Hide The Addnote Component\n      setDisplayAddNoteComponent(false);\n      // the response returns the created note\n      // we add it to our notebook\n      dispatch(addNote(response.data.note));\n    } catch (error) {\n        // display notification for error\n        dispatch(notificationError({'title': error.response.data.message || \n          error.request.statusText,\n          'autoDismiss': 0,\n          'message': `Failed to add note`,\n          'children': notificationTemplate.renderArray(error.response?.data?.errors),\n        }));\n    }\n    setIsLoading(false);\n  }\n\n  const handleColorChange = color => {\n    setNote(note => ({ ...note, color: color }));\n  };\n\n  const handleFieldChange = event => {\n    const { name, value } = event.target;\n    setNote(note => ({ ...note, [name]: value }));\n\t}\n\n  const Circle = (props) => {\n  \tconst { color } = {...props}\n  \treturn (\n  \t\t<div className={clsx(classes.shape, classes.shapeCircle)} \n  \t\t\t\tname=\"color\"\n\t\t\t\t\tstyle={{background: color ? color : null}} \n\t\t\t\t\tonClick={() => handleColorChange(color)} />\n\t\t\t);\n  }\n\nreturn (\n\t<Card className={classes.card} style={{background: note.color ? note.color : null}}>\n    <form className={classes.root} noValidate autoComplete=\"off\">\n      <div>\n        <TextField\n          id=\"filled-multiline-static\"\n          label=\"Title\"\n          name=\"title\"\n          multiline\n          rowsMax={2}\n          value={note.title}\n          onChange={handleFieldChange}\n          variant=\"filled\"\n        />\n        <TextField\n          id=\"filled-multiline-static\"\n          label=\"Body\"\n          name=\"body\"\n          multiline\n          rowsMax={10}\n          value={note.body}\n          onChange={handleFieldChange}\n          variant=\"filled\"\n        />\n        <TextField\n          id=\"filled-multiline-static\"\n          label=\"Tags\"\n          name=\"tags\"\n          multiline\n          rowsMax={2}\n          value={note.tags}\n          onChange={handleFieldChange}\n          variant=\"filled\"\n        />\n        <div className={classes.colors}>\n\t        Color\n\t        <Breadcrumbs separator=\" \">\n\t\t        {noteColors.map((color) => (\n\t\t        \t\t<Circle color={color} />\n\t\t        \t))\n\t\t        }\n\t        </Breadcrumbs>\n\t      </div>\n      </div>\n    </form>\n\t\t<CardActions>\n      <IconButton onClick={handleSubmit} disabled={isLoading}>\n        <DoneIcon />\n      </IconButton>\n\t\t</CardActions>\n  </Card>\n  );\n}\n\n\nexport default AddNote;"],"sourceRoot":""}